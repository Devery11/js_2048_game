{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /** +\n   *\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.getInitialTable = ()=>JSON.parse(JSON.stringify(initialState));\n        // eslint-disable-next-line no-console\n        this.state = this.getInitialTable();\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    calculateRow(arr) {\n        let filteredArr = arr.filter((item)=>item !== 0);\n        for(let i = 0; i < filteredArr.length - 1; i++)if (filteredArr[i] === filteredArr[i + 1]) {\n            filteredArr[i] *= 2;\n            this.score += filteredArr[i];\n            filteredArr[i + 1] = 0;\n        }\n        filteredArr = filteredArr.filter((el)=>el);\n        filteredArr.push(...new Array(4 - filteredArr.length).fill(0));\n        return filteredArr;\n    }\n    moveLeft() {\n        for(let i = 0; i < this.state.length; i++)this.state[i] = this.calculateRow(this.state[i]);\n    }\n    moveRight() {\n        for(let i = 0; i < this.state.length; i++)this.state[i] = this.calculateRow(this.state[i].reverse()).reverse();\n    }\n    moveUp() {\n        for(let indexRow = 0; indexRow < this.state.length; indexRow++){\n            const column = this.state.map((row)=>row[indexRow]);\n            const newColumn = this.calculateRow(column);\n            newColumn.forEach((value, indexColumn)=>{\n                this.state[indexColumn][indexRow] = value;\n            });\n        }\n    }\n    moveDown() {\n        for(let indexRow = 0; indexRow < this.state.length; indexRow++){\n            const column = this.state.map((row)=>row[indexRow]).reverse();\n            const newColumn = this.calculateRow(column).reverse();\n            newColumn.forEach((value, indexColumn)=>{\n                this.state[indexColumn][indexRow] = value;\n            });\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.spawnCell(0);\n        this.spawnCell(0);\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.getInitialTable();\n        this.score = 0;\n        this.start();\n    }\n    // Add your own methods here\n    spawnCell(percentForFour = 0.1) {\n        const arrOfVoidIndexes = this.getVoidCellIndexes();\n        if (arrOfVoidIndexes.length === 0) return;\n        const randomIndex = arrOfVoidIndexes[Math.floor(Math.random() * arrOfVoidIndexes.length)];\n        if (Math.random() < percentForFour) this.state[randomIndex[0]][randomIndex[1]] = 4;\n        else this.state[randomIndex[0]][randomIndex[1]] = 2;\n    }\n    getVoidCellIndexes() {\n        const result = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) result.push([\n                i,\n                j\n            ]);\n        }\n        return result;\n    }\n    checkWin() {\n        for(let i = 0; i < this.state.length; i++)if (this.state[i].indexOf(2048) !== -1) this.status = \"win\";\n    }\n    checkLose() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length - 1; j++){\n            const isRightEqual = this.state[j + 1][i] === this.state[j][i];\n            const isLeftEqual = this.state[i][j + 1] === this.state[i][j];\n            if (this.state[i][j] === 0 || this.state[i][j + 1] === 0) return;\n            else if (isLeftEqual || isRightEqual) return;\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$fieldRows = $09e991522ca7e64e$var$gameField.getElementsByTagName(\"tr\");\nconst $09e991522ca7e64e$var$page = document.body;\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n    } else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$synchronization();\n});\n$09e991522ca7e64e$var$page.addEventListener(\"keydown\", (eventListener)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const currentState = JSON.stringify($09e991522ca7e64e$var$game.getState());\n    switch(eventListener.keyCode){\n        case 37:\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 38:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 39:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 40:\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if (currentState === JSON.stringify($09e991522ca7e64e$var$game.getState())) return;\n    $09e991522ca7e64e$var$game.spawnCell();\n    $09e991522ca7e64e$var$game.checkWin();\n    $09e991522ca7e64e$var$game.checkLose();\n    $09e991522ca7e64e$var$synchronization();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n});\nfunction $09e991522ca7e64e$var$synchronization(gameCells = $09e991522ca7e64e$var$getGameArray()) {\n    const gameState = $09e991522ca7e64e$var$game.getState();\n    for(let i = 0; i < gameState.length; i++)for(let j = 0; j < gameState[i].length; j++){\n        gameCells[i][j].classList = [\n            \"field-cell\"\n        ];\n        if (gameState[i][j] !== 0) {\n            gameCells[i][j].textContent = gameState[i][j];\n            gameCells[i][j].classList.add(`field-cell--${gameState[i][j]}`);\n        } else gameCells[i][j].textContent = \"\";\n    }\n    const score = document.querySelector(\".game-score\");\n    score.textContent = \"\" + $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$getGameArray() {\n    const gameCellsArray = [];\n    for(let i = 0; i < $09e991522ca7e64e$var$fieldRows.length; i++){\n        const cells = $09e991522ca7e64e$var$fieldRows[i].getElementsByTagName(\"td\");\n        const rowArray = [];\n        for(let j = 0; j < cells.length; j++)rowArray.push(cells[j]);\n        gameCellsArray.push(rowArray);\n    }\n    return gameCellsArray;\n}\n\n\n//# sourceMappingURL=index.281b68d8.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst buttonStart = document.querySelector('.button');\nconst gameField = document.querySelector('.game-field');\nconst fieldRows = gameField.getElementsByTagName('tr');\nconst page = document.body;\n\nbuttonStart.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    buttonStart.classList.add('restart');\n    buttonStart.textContent = 'Restart';\n    game.start();\n    document.querySelector('.message-start').classList.add('hidden');\n  } else if (game.getStatus() === 'lose') {\n    document.querySelector('.message-lose').classList.add('hidden');\n    game.restart();\n  } else if (game.getStatus() === 'win') {\n    document.querySelector('.message-win').classList.add('hidden');\n    game.restart();\n  } else {\n    game.restart();\n  }\n\n  synchronization();\n});\n\npage.addEventListener('keydown', eventListener => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const currentState = JSON.stringify(game.getState());\n\n  switch (eventListener.keyCode) {\n    case 37:\n      game.moveLeft();\n      break;\n    case 38:\n      game.moveUp();\n      break;\n    case 39:\n      game.moveRight();\n      break;\n    case 40:\n      game.moveDown();\n      break;\n  }\n\n  if (currentState === JSON.stringify(game.getState())) {\n    return;\n  }\n\n  game.spawnCell();\n\n  game.checkWin();\n\n  game.checkLose();\n\n  synchronization();\n\n  if (game.getStatus() === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n});\n\nfunction synchronization(gameCells = getGameArray()) {\n  const gameState = game.getState();\n\n  for (let i = 0; i < gameState.length; i++) {\n    for (let j = 0; j < gameState[i].length; j++) {\n      gameCells[i][j].classList = ['field-cell'];\n\n      if (gameState[i][j] !== 0) {\n        gameCells[i][j].textContent = gameState[i][j];\n        gameCells[i][j].classList.add(`field-cell--${gameState[i][j]}`);\n      } else {\n        gameCells[i][j].textContent = '';\n      }\n    }\n  }\n\n  const score = document.querySelector('.game-score');\n\n  score.textContent = '' + game.getScore();\n}\n\nfunction getGameArray() {\n  const gameCellsArray = [];\n\n  for (let i = 0; i < fieldRows.length; i++) {\n    const cells = fieldRows[i].getElementsByTagName('td');\n    const rowArray = [];\n\n    for (let j = 0; j < cells.length; j++) {\n      rowArray.push(cells[j]);\n    }\n\n    gameCellsArray.push(rowArray);\n  }\n\n  return gameCellsArray;\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nclass Game {\n  /** +\n   *\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.getInitialTable = () => JSON.parse(JSON.stringify(initialState));\n    // eslint-disable-next-line no-console\n    this.state = this.getInitialTable();\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  calculateRow(arr) {\n    let filteredArr = arr.filter(item => item !== 0);\n\n    for (let i = 0; i < filteredArr.length - 1; i++) {\n      if (filteredArr[i] === filteredArr[i + 1]) {\n        filteredArr[i] *= 2;\n        this.score += filteredArr[i];\n        filteredArr[i + 1] = 0;\n      }\n    }\n\n    filteredArr = filteredArr.filter(el => el);\n\n    filteredArr.push(...(new Array(4 - filteredArr.length).fill(0)));\n\n    return filteredArr;\n  }\n\n  moveLeft() {\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i] = this.calculateRow(this.state[i]);\n    }\n  }\n\n  moveRight() {\n    for (let i = 0; i < this.state.length; i++) {\n      this.state[i] = this.calculateRow(this.state[i].reverse()).reverse();\n    }\n  }\n\n  moveUp() {\n    for (let indexRow = 0; indexRow < this.state.length; indexRow++) {\n      const column = this.state.map(row => row[indexRow]);\n      const newColumn = this.calculateRow(column);\n\n      newColumn.forEach((value, indexColumn) => {\n        this.state[indexColumn][indexRow] = value;\n      });\n    }\n  }\n\n  moveDown() {\n    for (let indexRow = 0; indexRow < this.state.length; indexRow++) {\n      const column = this.state.map(row => row[indexRow]).reverse();\n      const newColumn = this.calculateRow(column).reverse();\n\n      newColumn.forEach((value, indexColumn) => {\n        this.state[indexColumn][indexRow] = value;\n      });\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.spawnCell(0);\n    this.spawnCell(0);\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.getInitialTable();\n    this.score = 0;\n    this.start();\n  }\n\n  // Add your own methods here\n  spawnCell(percentForFour = 0.1) {\n    const arrOfVoidIndexes = this.getVoidCellIndexes();\n\n    if (arrOfVoidIndexes.length === 0) {\n      return;\n    }\n\n    const randomIndex\n      = arrOfVoidIndexes[Math.floor(Math.random() * arrOfVoidIndexes.length)];\n\n    if (Math.random() < percentForFour) {\n      this.state[randomIndex[0]][randomIndex[1]] = 4;\n    } else {\n      this.state[randomIndex[0]][randomIndex[1]] = 2;\n    }\n  }\n\n  getVoidCellIndexes() {\n    const result = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          result.push([i, j]);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  checkWin() {\n    for (let i = 0; i < this.state.length; i++) {\n      if (this.state[i].indexOf(2048) !== -1) {\n        this.status = 'win';\n      }\n    }\n  }\n\n  checkLose() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length - 1; j++) {\n        const isRightEqual = this.state[j + 1][i] === this.state[j][i];\n        const isLeftEqual = this.state[i][j + 1] === this.state[i][j];\n\n        if (this.state[i][j] === 0 || this.state[i][j + 1] === 0) {\n          return;\n        } else if (isLeftEqual || isRightEqual) {\n          return;\n        }\n      }\n    }\n    this.status = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","getInitialTable","JSON","parse","stringify","state","status","score","calculateRow","arr","filteredArr","filter","item","i","length","el","push","Array","fill","moveLeft","moveRight","reverse","moveUp","indexRow","column","map","row","newColumn","forEach","value","indexColumn","moveDown","getScore","getState","getStatus","start","spawnCell","restart","percentForFour","arrOfVoidIndexes","getVoidCellIndexes","randomIndex","Math","floor","random","result","j","checkWin","indexOf","checkLose","isRightEqual","isLeftEqual","$09e991522ca7e64e$var$buttonStart","document","querySelector","$09e991522ca7e64e$var$fieldRows","$09e991522ca7e64e$var$gameField","getElementsByTagName","$09e991522ca7e64e$var$page","body","$09e991522ca7e64e$var$synchronization","gameCells","$09e991522ca7e64e$var$getGameArray","gameCellsArray","cells","rowArray","gameState","classList","textContent","add","addEventListener","eventListener","currentState","keyCode","remove"],"version":3,"file":"index.281b68d8.js.map"}